{"version":3,"sources":["screens/LoginScreen.js","screens/ErrorScreen.js","App.js","serviceWorker.js","index.js"],"names":["LoginScreen_default","_React$Component","Object","inherits","_default","_super","createSuper","props","_this","classCallCheck","this","call","state","email","password","handleChange","bind","assertThisInitialized","handleSubmit","createClass","key","value","event","target","id","setState","URL","fetch","headers","accept","accept-language","content-type","body","method","then","res","json","result","token","student_id","error","status","data","user","message","Telegram","window","WebApp","sendData","JSON","stringify","close","preventDefault","react_default","a","createElement","onSubmit","type","onChange","React","Component","ErrorScreen","App","react_router_dom","basename","process","react_router","path","exact","component","LoginScreen","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f2e0220.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default class extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  \r\n\r\n  handleChange(event) {\r\n    if(event.target.id == \"email\")\r\n      this.setState({email: event.target.value});\r\n    else if(event.target.id == \"password\")\r\n      this.setState({password: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    URL = \"https://iitb.placementcontrols.com/iitb-node/authenticate\"\r\n    fetch(URL, {\r\n      \"headers\": {\r\n        \"accept\": \"application/json, text/plain, */*\",\r\n        \"accept-language\": \"en-US,en;q=0.9\",\r\n        \"content-type\": \"application/json\",\r\n      },\r\n      \"body\": \"{\\n  \\\"email\\\": \\\"\" + this.state.email + \"\\\",\\n  \\\"password\\\": \\\"\" + this.state.password + \"\\\",\\n  \\\"app_version\\\": \\\"1.6.96\\\"\\n}\",\r\n      \"method\": \"POST\"\r\n    }).then(res => res.json())\r\n    .then((result) => {\r\n      var token, student_id, error;\r\n      if(result.status == 'success') {\r\n        token = result.data.token;\r\n        student_id = result.data.user.student_id;\r\n        error = null;\r\n      } else {\r\n        token = null;\r\n        student_id = null;\r\n        error = result.data.message;\r\n      }\r\n      const Telegram = window.Telegram;\r\n      Telegram.WebApp.sendData(JSON.stringify({token, student_id, error}));\r\n      Telegram.WebApp.close();\r\n    });\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>Email: <input id=\"email\" type=\"text\" value={this.state.email} onChange={this.handleChange}></input></label> <br />\r\n        <label>Password: <input id=\"password\" type=\"password\" value={this.state.password} onChange={this.handleChange}></input></label> <br />\r\n        <input type=\"submit\" value=\"Submit\"></input>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function(props) {\r\n  return (\r\n    <p>\r\n      404- Not Found\r\n    </p>\r\n  )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport {\r\n  LoginScreen,\r\n  ErrorScreen,\r\n} from './screens';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n        <Route path=\"/\" exact component={LoginScreen} />\r\n        <Route component={ErrorScreen} />\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}